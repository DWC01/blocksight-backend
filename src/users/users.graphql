scalar JSON
scalar DateTime

enum SortOrder {
	asc
	desc
}

type User {
	id: Int!
	email: String!
	role: String!
	createdAt: DateTime!
	updatedAt: DateTime!
}

input UserOrderByInput {
	id: SortOrder
	email: SortOrder
	role: SortOrder
	createdAt: SortOrder
	updatedAt: SortOrder
}

input UserWhereInput {
	AND: [UserWhereInput]
	OR: [UserWhereInput]
	NOT: [UserWhereInput]
	id: Int
	email: String
	role: String
	createdAt: DateTime
	updatedAt: DateTime
}

input UserWhereUniqueInput {
	id: Int
	email: String
}

type Query {
	users(
		skip: Int
		take: Int
		cursor: UserWhereUniqueInput
		orderBy: UserOrderByInput
		where: UserWhereInput
	): [User]!
	user(id: Int!): User
}

input CreateUserInput {
	email: String!
	password: String!
}

input UpdateUserInput {
	email: String
}

type Mutation {
	createUser(createUserInput: CreateUserInput!): User!
	updateUser(id: Int!, updateUserInput: UpdateUserInput!): User!
	deleteUser(id: Int!): User!
}
