# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type LogOutResponse {
  userId: Float!
  isAuthenticated: Boolean!
}

type UsersExchanges {
  id: Float
  user: User
  exchange: Exchange
  userId: Float
  exchangeId: Float
  apiKey: String
  apiSecret: String
  apiPassphrase: String
  apiNickname: String
  createdAt: DateTime
  updatedAt: DateTime
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Exchange {
  id: Float
  name: String
  websiteUrl: String
  logoUrl: String
  companyLogoUrl: String
  hasApi: Boolean
  hasCsv: Boolean
  users: [UsersExchanges!]
  createdAt: DateTime
  updatedAt: DateTime
}

type FiatTransfer {
  id: Float
  exchange: Exchange
  user: User
  type: String
  amount: String
  currency: String
  timestamp: DateTime
  transferData: JSON
  exchangeId: Float
  userId: Float
  createdAt: DateTime
  updatedAt: DateTime
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type User {
  id: Float
  email: String
  primaryWalletAddress: String
  role: String
  exchanges: [UsersExchanges!]
  fiatTransfers: [FiatTransfer!]
  createdAt: DateTime
  updatedAt: DateTime
}

type SessionResponse {
  user: User!
  isAuthenticated: Boolean!
}

type Value {
  value: String
  formatted: String
}

type FiatTransfersTotals {
  totalDeposited: Value!
  totalWorking: Value!
  totalWithdrawn: Value!
}

type Network {
  chainId: String
  chainName: String
  name: String
  rpcUrl: String
  symbol: String
  blockExplorerUrl: String
  logoUrl: String
}

type TokenBalance {
  type: String
  name: String
  price: Value
  symbol: String
  isNft: Boolean
  chainId: String
  balance: String
  logoUrl: String
  decimals: String
  totalValue: Value
  supportsErc: [String!]
  contractAddress: String
}

type TokenValueBalances {
  totalValue: Value
  balances: [TokenBalance!]
}

type TokenBalances {
  totalValue: Value
  networks: [Network!]
  tokens: TokenValueBalances
  nfts: TokenValueBalances
  hidden: TokenValueBalances
  scam: TokenValueBalances
}

type CryptoAssetsChartDataPoint {
  date: String!
  workingFiat: String!
}

type Query {
  findOneUser(findOneUserInput: FindOneUserInput!): User
  findAllUsers(findAllUsersInput: FindAllUsersInput!): [User!]!
  findAllFiatTransfers(findAllFiatTransfersInput: FindAllFiatTransfersInput!): [FiatTransfer!]!
  findOneFiatTransfer(findOneFiatTransferInput: FindOneFiatTransferInput!): FiatTransfer
  getFiatTransferTotals(userId: Int!): FiatTransfersTotals!
  getTokenBalances(getTokenBalancesInput: GetTokenBalancesInput!): TokenBalances
  findAllUsersExchanges(findAllUsersExchangesInput: FindAllUsersExchangesInput!): [UsersExchanges!]!
  findOneUsersExchanges(findOneUsersExchangesInput: FindOneUsersExchangesInput!): UsersExchanges
  getCryptoAssetsChartData(userId: Float!): [CryptoAssetsChartDataPoint!]!
  currentUser: SessionResponse!
  findAllExchanges(findAllExchangesInput: FindAllExchangesInput!): [Exchange!]!
  findOneExchange(findOneExchangeInput: FindOneExchangeInput!): Exchange
}

input FindOneUserInput {
  email: String
  primaryWalletAddress: String
  id: Float
}

input FindAllUsersInput {
  skip: Float
  take: Float
  cursor: UserCursor
  where: UserWhereInput
  orderBy: UserOrderByInput
}

input UserCursor {
  id: Float
  email: String
  primaryWalletAddress: String
}

input UserWhereInput {
  id: Float
  email: String
  primaryWalletAddress: String
  role: String
  createdAt: DateTime
  updatedAt: DateTime
  AND: [UserInput!]
  OR: [UserInput!]
  NOT: [UserInput!]
}

input UserInput {
  id: Float
  email: String
  primaryWalletAddress: String
  role: String
  createdAt: DateTime
  updatedAt: DateTime
}

input UserOrderByInput {
  id: String
  email: String
  primaryWalletAddress: String
  role: String
  createdAt: String
  updatedAt: String
}

input FindAllFiatTransfersInput {
  skip: Float
  take: Float
  cursor: FiatTransferCursorInput
  where: FiatTransferWhereInput
  orderBy: FiatTransferOrderByInput
}

input FiatTransferCursorInput {
  id: Float
  type: String
  amount: String
  currency: String
  timestamp: DateTime
  transferData: JSON
  exchangeId: Float
  userId: Float
}

input FiatTransferWhereInput {
  id: Float
  type: String
  amount: String
  currency: String
  timestamp: DateTime
  transferData: JSON
  exchangeId: Float
  userId: Float
  createdAt: DateTime
  updatedAt: DateTime
  AND: [FiatTransferInput!]
  OR: [FiatTransferInput!]
  NOT: [FiatTransferInput!]
}

input FiatTransferInput {
  id: Float
  type: String
  amount: String
  currency: String
  timestamp: DateTime
  transferData: JSON
  exchangeId: Float
  userId: Float
  createdAt: DateTime
  updatedAt: DateTime
}

input FiatTransferOrderByInput {
  id: String
  type: String
  amount: String
  currency: String
  timestamp: String
  transferData: String
  exchangeId: String
  userId: String
  createdAt: String
  updatedAt: String
}

input FindOneFiatTransferInput {
  id: Float
}

input GetTokenBalancesInput {
  filter: String
  address: String
  currency: String
}

input FindAllUsersExchangesInput {
  skip: Float
  take: Float
  cursor: UsersExchangesCursorInput
  where: UsersExchangesWhereInput
  orderBy: UsersExchangesOrderByInput
}

input UsersExchangesCursorInput {
  id: Float
  userId: Float
  exchangeId: Float
  apiKey: String
  apiSecret: String
  apiPassphrase: String
  apiNickname: String
}

input UsersExchangesWhereInput {
  id: Float
  userId: Float
  exchangeId: Float
  apiKey: String
  apiSecret: String
  apiPassphrase: String
  apiNickname: String
  createdAt: DateTime
  updatedAt: DateTime
  AND: [UsersExchangesInput!]
  OR: [UsersExchangesInput!]
  NOT: [UsersExchangesInput!]
}

input UsersExchangesInput {
  id: Float
  userId: Float
  exchangeId: Float
  apiKey: String
  apiSecret: String
  apiPassphrase: String
  apiNickname: String
  createdAt: DateTime
  updatedAt: DateTime
}

input UsersExchangesOrderByInput {
  id: String
  userId: String
  exchangeId: String
  apiKey: String
  apiSecret: String
  apiPassphrase: String
  apiNickname: String
  createdAt: String
  updatedAt: String
}

input FindOneUsersExchangesInput {
  id: Float
}

input FindAllExchangesInput {
  skip: Float
  take: Float
  cursor: ExchangeCursorInput
  where: ExchangeWhereInput
  orderBy: ExchangeOrderByInput
}

input ExchangeCursorInput {
  id: Float
  name: String
}

input ExchangeWhereInput {
  id: Float
  name: String
  websiteUrl: String
  logoUrl: String
  companyLogoUrl: String
  hasApi: Boolean
  hasCsv: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  AND: [ExchangeInput!]
  OR: [ExchangeInput!]
  NOT: [ExchangeInput!]
}

input ExchangeInput {
  id: Float
  name: String
  websiteUrl: String
  logoUrl: String
  companyLogoUrl: String
  hasApi: Boolean
  hasCsv: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

input ExchangeOrderByInput {
  id: String
  name: String
  websiteUrl: String
  logoUrl: String
  companyLogoUrl: String
  hasApi: String
  hasCsv: String
  createdAt: String
  updatedAt: String
}

input FindOneExchangeInput {
  id: Float
  name: String
}

type Mutation {
  updateUser(id: Int!, updateUserInput: UpdateUserInput!): User!
  deleteUser(id: Int!): User!
  createFiatTransfer(createFiatTransferInput: CreateFiatTransferInput!): FiatTransfer!
  updateFiatTransfer(id: Int!, updateFiatTransferInput: UpdateFiatTransferInput!): FiatTransfer!
  deleteFiatTransfer(id: Int!): FiatTransfer!
  createUsersExchanges(createUsersExchangesInput: CreateUsersExchangesInput!): UsersExchanges!
  updateUsersExchanges(id: Int!, updateUsersExchangesInput: UpdateUsersExchangesInput!): UsersExchanges!
  deleteUsersExchanges(id: Int!): UsersExchanges!
  login(sessionInput: SessionInput!): SessionResponse!
  signInMetaMask(signInMetaMaskInput: SignInMetaMaskInput!): SessionResponse!
  signUp(createUserEmailInput: CreateUserEmailInput!): SessionResponse!
  logOut(userId: Float!): LogOutResponse!
  createExchange(createExchangeInput: CreateExchangeInput!): Exchange!
  updateExchange(id: Int!, updateExchangeInput: UpdateExchangeInput!): Exchange!
  deleteExchange(id: Int!): Exchange!
}

input UpdateUserInput {
  email: String
  primaryWalletAddress: String
}

input CreateFiatTransferInput {
  type: String
  amount: String
  currency: String
  timestamp: DateTime
  transferData: JSON
  exchangeId: Float
  userId: Float
}

input UpdateFiatTransferInput {
  type: String
  amount: String
  currency: String
  timestamp: DateTime
  transferData: JSON
  exchangeId: Float
  userId: Float
}

input CreateUsersExchangesInput {
  userId: Float
  exchangeId: Float
  apiKey: String
  apiSecret: String
  apiPassphrase: String
  apiNickname: String
}

input UpdateUsersExchangesInput {
  userId: Float
  exchangeId: Float
  apiKey: String
  apiSecret: String
  apiPassphrase: String
  apiNickname: String
}

input SessionInput {
  email: String!
  password: String!
}

input SignInMetaMaskInput {
  address: String!
  signature: String!
  message: String!
}

input CreateUserEmailInput {
  email: String!
  password: String!
  passwordConfirmation: String
}

input CreateExchangeInput {
  name: String
  websiteUrl: String
  logoUrl: String
  companyLogoUrl: String
  hasApi: Boolean
  hasCsv: Boolean
}

input UpdateExchangeInput {
  name: String
  websiteUrl: String
  logoUrl: String
  companyLogoUrl: String
  hasApi: Boolean
  hasCsv: Boolean
}